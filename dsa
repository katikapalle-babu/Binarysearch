class Solution {
  def solve(A: Array[Int]): Array[Int] = {
    if (A == null || A.isEmpty) {
      return Array() // Return an empty array for empty input
    }

    val n = A.length
    val result = new Array[Int](n)

    result(0) = 1 // Initialize count for the first element

    for (i <- 1 until n) {
      if (A(i) == A(i - 1)) {
        result(i) = result(i - 1) + 1 // Increment count if the current element is equal to the previous
      } else {
        result(i) = 1 // Reset count to 1 if the current element is different from the previous
      }
    }

    result
  }
}

object Main {
  def main(args: Array[String]): Unit = {
    val solution = new Solution()
    val A = Array(1, 2, 5, 1, 5, 1)
    val result = solution.solve(A)
    println(result.mkString(", "))
  }
}


object CombineArraysExample {
  def main(args: Array[String]): Unit = {
    val array1 = Array(1, 2, 3)
    val array2 = Array(4, 5, 6)
    
    // Combine arrays using ++
    val combinedArray = array1 ++ array2
    
    // Print the combined array
    println("Combined Array: " + combinedArray.mkString(" "))
  }
}



object Solution {
  def sqrt(A: Int): Int = {
    if (A == 0) return 0

    var low = 1
    var high = A
    var ans = 1

    while (low <= high) {
      val mid = low + (high - low) / 2

      if (mid <= A / mid) {
        ans = mid
        low = mid + 1
      } else {
        high = mid - 1
      }
    }

    ans
  }

  def main(args: Array[String]): Unit = {
    val number = 16
    val result = sqrt(number)
    println(s"The square root of $number is $result")
  }
}


object solution extends App {
  def solve(A: String): Int  = {
    val n = A.length
    var sum = 0
    for (i <- 0 until n) {
      sum = sum + A(i).toInt
    }
    sum
  }
  
  val result = solve("shobhan")
  println(result)
}
S

